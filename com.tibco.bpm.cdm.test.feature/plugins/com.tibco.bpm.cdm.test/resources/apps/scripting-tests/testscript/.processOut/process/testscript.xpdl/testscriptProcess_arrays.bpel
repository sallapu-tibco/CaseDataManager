<?xml version="1.0" encoding="UTF-8"?>
<bpws:process exitOnStandardFault="no" name="testscriptProcess_arrays"
    suppressJoinFailure="yes" tibex:bxVersion="11.0.0"
    tibex:dataFieldDescriptorClass="com.example.testscript.testscript.testscriptProcess_arrays"
    tibex:dataFieldDescriptorScript="process-js/testscript/testscriptProcess_arrays/testscriptProcess_arrays.js"
    tibex:explicitCompensation="yes"
    tibex:xpdlId="_Wpx4op1xEem5lq9Ch4kVBA"
    xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:tibex="http://www.tibco.com/bpel/2007/extensions" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <tibex:VariableDescriptor type="PersistentBatching">
        <task name="ScriptTaskSimpleDataManipulation">
            <startingVariables>
                <variable>DFDateTimeZoneArray</variable>
                <variable>DFTimeArray</variable>
                <variable>DFNumberArray</variable>
                <variable>DFFixedPointNumberArray</variable>
                <variable>DFDateArray</variable>
                <variable>DFTextArray</variable>
                <variable>DFBooleanArray</variable>
            </startingVariables>
        </task>
        <task name="ScriptTaskBOMArrayManipulation">
            <startingVariables>
                <variable>DFDateTimeZoneArray</variable>
                <variable>BOMOutsideClasses</variable>
                <variable>DFTimeArray</variable>
                <variable>BOMCallingClass</variable>
                <variable>DFFixedPointNumberArray</variable>
                <variable>DFDateArray</variable>
                <variable>DFTextArray</variable>
                <variable>DFBooleanArray</variable>
            </startingVariables>
        </task>
    </tibex:VariableDescriptor>
    <bpws:documentation>*** Generated by TIBCO Business Studio.</bpws:documentation>
    <bpws:variables>
        <bpws:variable name="DFTextArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4qp1xEem5lq9Ch4kVBA" type="xsd:string"/>
        <bpws:variable name="DFNumberArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4q51xEem5lq9Ch4kVBA" type="xsd:double"/>
        <bpws:variable name="DFFixedPointNumberArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4rJ1xEem5lq9Ch4kVBA" type="xsd:double"/>
        <bpws:variable name="DFBooleanArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4rZ1xEem5lq9Ch4kVBA" type="xsd:boolean"/>
        <bpws:variable name="DFDateArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4rp1xEem5lq9Ch4kVBA" type="xsd:date"/>
        <bpws:variable name="DFTimeArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4r51xEem5lq9Ch4kVBA" type="xsd:time"/>
        <bpws:variable name="DFDateTimeZoneArray" tibex:array="yes"
            tibex:xpdlId="_Wpx4sJ1xEem5lq9Ch4kVBA" type="xsd:dateTime"/>
        <bpws:variable name="BOMCallingClass"
            tibex:class="com.example.businessobjectmodel.testclasscalling" tibex:xpdlId="_Wpx4sZ1xEem5lq9Ch4kVBA"/>
        <bpws:variable name="BOMOutsideClasses" tibex:array="yes"
            tibex:class="com.example.testdata_outside.outside_class" tibex:xpdlId="_uQyRQLONEemp9tMw2vLQgg"/>
    </bpws:variables>
    <bpws:extensions>
        <bpws:extension mustUnderstand="yes" namespace="http://www.tibco.com/bpel/2007/extensions"/>
    </bpws:extensions>
    <bpws:eventHandlers/>
    <bpws:flow name="_BX_flow_-y2HANrtEem48ey02mVbRA">
        <bpws:links>
            <bpws:link name="StartEvent to _Wpx4pZ1xEem5lq9Ch4kVBA" tibex:xpdlId="_Wpx4qJ1xEem5lq9Ch4kVBA"/>
            <bpws:link
                name="_Wpx4pZ1xEem5lq9Ch4kVBA to _Wpx4pp1xEem5lq9Ch4kVBA" tibex:xpdlId="_Wpx4qZ1xEem5lq9Ch4kVBA"/>
            <bpws:link name="_Wpx4pp1xEem5lq9Ch4kVBA to EndEvent" tibex:xpdlId="_Wpx4p51xEem5lq9Ch4kVBA"/>
        </bpws:links>
        <bpws:extensionActivity>
            <tibex:receiveEvent createInstance="yes" eventTimeout="0"
                name="StartEvent" tibex:type="startEvent"
                tibex:xpdlId="_Wpx4o51xEem5lq9Ch4kVBA" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:sources>
                    <bpws:source linkName="StartEvent to _Wpx4pZ1xEem5lq9Ch4kVBA"/>
                </bpws:sources>
                <tibex:eventSource>
                    <tibex:startEvent eventType="Default"/>
                </tibex:eventSource>
            </tibex:receiveEvent>
        </bpws:extensionActivity>
        <bpws:empty name="EndEvent" tibex:migrationAllowed="yes"
            tibex:type="endEvent" tibex:xpdlId="_Wpx4pJ1xEem5lq9Ch4kVBA">
            <bpws:targets>
                <bpws:target linkName="_Wpx4pp1xEem5lq9Ch4kVBA to EndEvent"/>
            </bpws:targets>
        </bpws:empty>
        <bpws:extensionActivity>
            <tibex:extActivity name="ScriptTaskBOMArrayManipulation"
                tibex:migrationAllowed="yes" tibex:type="scriptTask"
                tibex:xpdlId="_Wpx4pZ1xEem5lq9Ch4kVBA" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:targets>
                    <bpws:target linkName="StartEvent to _Wpx4pZ1xEem5lq9Ch4kVBA"/>
                </bpws:targets>
                <bpws:sources>
                    <bpws:source linkName="_Wpx4pZ1xEem5lq9Ch4kVBA to _Wpx4pp1xEem5lq9Ch4kVBA"/>
                </bpws:sources>
                <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[var bomCallingClass = factory.com_example_businessobjectmodel.createTestclasscalling();
var bomLocallyCalledClass = factory.com_example_businessobjectmodel.createLocallycalledclass();
var bomLocallyCalledClass_1 = factory.com_example_businessobjectmodel.createLocallycalledclass();
var bomLocallyCalledClass_2 = factory.com_example_businessobjectmodel.createLocallycalledclass();
var bomLocallyCalledClass_3 = factory.com_example_businessobjectmodel.createLocallycalledclass();
var bomOutsideCalledClass_1 = factory.com_example_testdata_outside.createOutside_class();
var bomOutsideCalledClass_2 = factory.com_example_testdata_outside.createOutside_class();
var bomOutsideCalledClass_3 = factory.com_example_testdata_outside.createOutside_class();
var bomOutsideCalledClassObject_1 = factory.com_example_testdata_outside.createOutside_class_object();
var bomOutsideCalledClassObject_2 = factory.com_example_testdata_outside.createOutside_class_object();
//boolean
data.DFBooleanArray.push(true);
data.DFBooleanArray.push(false);
bomCallingClass.attributeBooleanArray.pushAll(data.DFBooleanArray);
for(var i=0; i<data.DFBooleanArray.length; i++)
{
bomCallingClass.attributeBooleanArray.push(data.DFBooleanArray[i]);
}
bomCallingClass.attributeBooleanArray.push(false);
bomCallingClass.attributeBooleanArray.reverse();
var objectBooleanArrayLength = bomCallingClass.attributeBooleanArray.length;
//3
bomCallingClass.attributeBooleanArray.push(true);
for(var i=0; i< bomCallingClass.attributeBooleanArray.length; i++)
{
	Log.write('value of calling boolean array elements: ' + bomCallingClass.attributeBooleanArray[i]);
}
//false, false, true, true 
//date
data.DFDateArray.push(new Date('1992-11-19'));
data.DFDateArray.push(new Date('2002-10-18'));
bomCallingClass.attributeDateArray.pushAll(data.DFDateArray);
bomCallingClass.attributeDateArray.push(new Date('1968-02-11'), new Date('2023-09-08'), new Date('2029-01-03'));
var objectDateArrayLength = bomCallingClass.attributeDateArray.length;
//5
for(var i=0; i< bomCallingClass.attributeDateArray.length; i++)
{
	Log.write('value of calling date array elements: ' + bomCallingClass.attributeDateArray[i]);
}
//1992-11-19, 2002-10-18, 1968-02-11, 2023-09-08, 2029-01-03
//date time zone
bomCallingClass.attributeDateTimeTZArray.push(new Date('1992-06-01T18:24:16.343+00:30'));
bomCallingClass.attributeDateTimeTZArray.push(new Date('1993-11-29T01:10:13.979-00:30'));
bomCallingClass.attributeDateTimeTZArray.reverse();
var objectDateTimeTZArrayLength = bomCallingClass.attributeDateTimeTZArray.length;
//2
bomCallingClass.attributeDateTimeTZArray.push(new Date('2021-12-26T11:12:13.123'));
for(var i=0; i<bomCallingClass.attributeDateTimeTZArray.length; i++)
{
	Log.write('value of calling date time TZ array elements: ' + bomCallingClass.attributeDateTimeTZArray[i]);
}
//1992-06-01T18:54:16, 1993-11-29T00:40:13, 2021-12-26T11:12:13
//text
data.DFTextArray.push("first value in bom text array");
data.DFTextArray.push("second value in bom text array");

for(var i=0; i<data.DFTextArray.length; i++)
{
	bomCallingClass.attributeTextArray.push(data.DFTextArray[i]);
}
bomCallingClass.attributeTextArray.push("third value in bom text array");
for(var i=3; i<8; i++)
{
	bomCallingClass.attributeTextArray.push((i+1).toString() + 'TH value in bom text array');
}
bomCallingClass.attributeTextArray[2] = bomCallingClass.attributeTextArray[2].toUpperCase();
bomCallingClass.attributeTextArray[4] = bomCallingClass.attributeTextArray[4].toLowerCase();
bomCallingClass.attributeTextArray[5] = bomCallingClass.attributeTextArray[5].substr(0, 5);
var objectTextArrayLength = bomCallingClass.attributeTextArray.length;
//8
for(var i=0; i< bomCallingClass.attributeTextArray.length; i++)
{
	Log.write('value of calling text array elements: ' + bomCallingClass.attributeTextArray[i]);
}
//first value in bom text array, second value in bom text array, THIRD VALUE IN BOM TEXT ARRAY, 4TH value in bom text array, 5th value in bom text array,
//6TH v, 7TH value in bom text array, 8TH value in bom text array
//URI
bomCallingClass.attributeUriArray.push("http://www.tibco.com");
bomCallingClass.attributeUriArray.push("http://www.vista-equity.com");
bomCallingClass.attributeUriArray.push("http://www.citibank.com");
bomCallingClass.attributeUriArray[2] = bomCallingClass.attributeUriArray[2].concat("/guid=abcd/customer-success-story");
bomCallingClass.attributeUriArray.reverse();
var objectUriLength = bomCallingClass.attributeUriArray.length;
//3
bomCallingClass.attributeUriArray.push('http://www.spotfire.org/');
for(var i=0; i< bomCallingClass.attributeUriArray.length; i++)
{
	Log.write('value of calling uri array elements: ' + bomCallingClass.attributeUriArray[i]);
}
//http://www.citibank.com/guid=abcd/customer-success-story, http://www.vista-equity.com, http://www.tibco.com, http://www.spotfire.org/
//time
data.DFTimeArray.push(new Date('10:11:12'));
data.DFTimeArray.push(new Date('13:14:15'));
//bomCallingClass.attributeTimeArray = data.DFTimeArray;
for(var i=0; i<data.DFTimeArray.length; i++)
{
bomCallingClass.attributeTimeArray.push(data.DFTimeArray[i]);
}
bomCallingClass.attributeTimeArray.push(new Date('16:17:18'), new Date('19:20:21'), new Date('01:02:03'), new Date('22:23:24'));
var objectTimeArrayLength = bomCallingClass.attributeTimeArray.length;
//6
bomCallingClass.attributeTimeArray.pop();
for(var i=0; i< bomCallingClass.attributeTimeArray.length; i++)
{
	Log.write('value of calling time array elements: ' + bomCallingClass.attributeTimeArray[i]);
}
//10:11:12, 13:14:15, 16:17:18, 19:20:21, 01:02:03
//Fixed point number
data.DFFixedPointNumberArray.push(1001.234);
data.DFFixedPointNumberArray.push(2002.345);
//bomCallingClass.attributeFixedPointNumberArray = data.DFFixedPointNumberArray;
for(var i=0; i<data.DFFixedPointNumberArray.length; i++)
{
bomCallingClass.attributeFixedPointNumberArray.push(data.DFFixedPointNumberArray[i]);
}
bomCallingClass.attributeFixedPointNumberArray.push(3003.456, 4004.567);
bomCallingClass.attributeFixedPointNumberArray.push(bomCallingClass.attributeFixedPointNumberArray[1] + bomCallingClass.attributeFixedPointNumberArray[2]);
var objectFixedPointNumberArrayLength = bomCallingClass.attributeFixedPointNumberArray.length;
//5
for(var i=0; i< bomCallingClass.attributeFixedPointNumberArray.length; i++)
{
	Log.write('value of calling fixed point number array elements: ' + bomCallingClass.attributeFixedPointNumberArray[i]);
}
//1001.234, 2002.345, 3003.456, 4004.567, 5005.801
//object mapping
bomLocallyCalledClass_1.attributeDateLocallyCalledArray.push(new Date('1990-04-26'));
bomLocallyCalledClass_1.attributeDateLocallyCalledArray.push(new Date('2019-07-07'));
bomLocallyCalledClass_1.attributeLocallyCalledEnumeration = pkg.com_example_businessobjectmodel.testenumeration.INTERMEDIATE1234567890;
bomLocallyCalledClass_1.attributeNumberLocallyCalled = (12345 * 0.13); //1604.85
bomLocallyCalledClass_1.attributeTextLocallyCalled = "First";
bomCallingClass.attributeLocalCallingArray.push(bomLocallyCalledClass_1);
bomCallingClass.attributeLocalCallingArray[0].attributeDateLocallyCalledArray.push(new Date('2019-10-15'));
bomCallingClass.attributeLocalCallingArray[0].attributeNumberLocallyCalled.add(0.2); //2469.334

bomLocallyCalledClass_2.attributeLocallyCalledEnumeration = pkg.com_example_businessobjectmodel.testenumeration.COMPLETED1234435645689;
bomLocallyCalledClass_2.attributeNumberLocallyCalled = (12340 * 0.2); //2468
bomLocallyCalledClass_2.attributeTextLocallyCalled = "SECON";
bomCallingClass.attributeLocalCallingArray.push(bomLocallyCalledClass_2);
bomCallingClass.attributeLocalCallingArray[1].attributeNumberLocallyCalled.multiply(2); //4936
bomCallingClass.attributeLocalCallingArray[1].attributeTextLocallyCalled = bomCallingClass.attributeLocalCallingArray[1].attributeTextLocallyCalled.toLowerCase();

bomLocallyCalledClass_3.attributeDateLocallyCalledArray.push(new Date('2990-04-26'));
bomLocallyCalledClass_3.attributeDateLocallyCalledArray.push(new Date('1019-07-07'));
bomLocallyCalledClass_3.attributeDateLocallyCalledArray.push(new Date('1947-08-15'));
bomLocallyCalledClass_3.attributeDateLocallyCalledArray.push(new Date('1984-04-26'));
bomLocallyCalledClass_3.attributeTextLocallyCalled = "third";
bomCallingClass.attributeLocalCallingArray.push(bomLocallyCalledClass_3);
bomCallingClass.attributeLocalCallingArray[2].attributeTextLocallyCalled = bomCallingClass.attributeLocalCallingArray[2].attributeTextLocallyCalled.toUpperCase();
bomCallingClass.attributeLocalCallingArray.reverse();
//conact is not working, so using push
//@Birju - As per the concat() API, it returns a new array. It does not change the existing array.
//+"bomCallingClass.attributeLocalCallingArray.concat(bomLocallyCalledClass_1);
bomCallingClass.attributeLocalCallingArray.push(bomCallingClass.attributeLocalCallingArray[2]);
//pushing array-1 which is bomLocallyCalledClass_1
//copyWithin is not not working
//@Birju - copyWithin() is an ES6 API that does not seem to be supported in Nashorn.
//+"bomCallingClass.attributeLocalCallingArray.copyWithin(3,2,4);
//but copying bomLocallyCalledClass_1 values
//TODO insterted by nashtapu [Jul 8, 2019 5:01:14 PM] need some debugging here the value gets updated to all copies
bomCallingClass.attributeLocalCallingArray[3].attributeDateLocallyCalledArray.push(new Date('1948-01-30'));
bomCallingClass.attributeLocalCallingArray[3].attributeLocallyCalledEnumeration = pkg.com_example_businessobjectmodel.testenumeration.CANCELLED;
bomCallingClass.attributeLocalCallingArray[3].attributeNumberLocallyCalled = bomCallingClass.attributeLocalCallingArray[3].attributeDateLocallyCalledArray.length;
//THIRD 2990-04-26 101907-07, 1947-08-15, 1984-04-26
//secon COMPLETED1234435645689, 49.36
//First INTERMEDIATE1234567890, 1604.9, 1990-04-26, 2019-07-07, 2019-10-15
//First CANCELLED, 4, 1990-04-26, 2019-07-07, 2019-10-15, 1948-01-30
//evaluate one of the objects in the array
var objectLocallyCalledObjectArrayLength = bomCallingClass.attributeLocalCallingArray.length;
var bomLocallyCalledClass_Evaluate_1 = factory.com_example_businessobjectmodel.createLocallycalledclass();
var bomLocallyCalledClass_Evaluate_2 = factory.com_example_businessobjectmodel.createLocallycalledclass();
bomLocallyCalledClass_Evaluate_1 = bomCallingClass.attributeLocalCallingArray[3];
bomLocallyCalledClass_Evaluate_2 = bomCallingClass.attributeLocalCallingArray[1];

//outside enumeration
bomCallingClass.attributeOutsideEnumeration = pkg.com_example_testdata_outside.outside_enumeration.OUTSIDEENUMERATION1;
//construct outside class object - 1
var xString = "http://www.twitter.com";
bomOutsideCalledClassObject_1.outsideClassObjectAttributeURI = xString;
bomOutsideCalledClassObject_1.outsideClassObjectAttributeURI = bomOutsideCalledClassObject_1.outsideClassObjectAttributeURI.concat("/celebrityProfile1");
bomOutsideCalledClassObject_1.outsideClassObjectAttributeBoolean = true;
//construct outside class - 1
data.DFDateTimeZoneArray.pop();
data.DFDateTimeZoneArray.pop();
data.DFDateTimeZoneArray.pop();
data.DFDateTimeZoneArray.push(new Date('1993-11-19'), new Date('2003-10-18'));
bomOutsideCalledClass_1.outsideAttributeDateTimeZoneArray.pushAll(data.DFDateTimeZoneArray);
bomOutsideCalledClass_1.outsideAttributeDateTimeZoneArray.push(new Date('1680-05-29'));
for(var i=0; i<2; i++)
{
	data.DFTextArray.pop();
}
data.DFTextArray.push('1st text value inserted using pushAll(array)', "2nd text value inserted using pushAll(array)");
bomOutsideCalledClass_1.outsideAttributeTextArray.pushAll(data.DFTextArray);
bomOutsideCalledClass_1.outsideAttributeTextArray.push('3rd text value inserted using push(object)');
bomOutsideCalledClass_1.outsideAttributeObject = bomOutsideCalledClassObject_1;

//construct outside class object - 2
var yString = "http://www.instagram.com";
bomOutsideCalledClassObject_2.outsideClassObjectAttributeURI = yString;
bomOutsideCalledClassObject_2.outsideClassObjectAttributeURI = bomOutsideCalledClassObject_1.outsideClassObjectAttributeURI.concat("/politicianProfile1");
bomOutsideCalledClassObject_2.outsideClassObjectAttributeBoolean = false;

//construct outside class - 2
//trying <array>.length = 0; to clear array
data.DFDateTimeZoneArray.length = 0;
data.DFDateTimeZoneArray.push(new Date('1994-11-19'), new Date('2004-10-18'));
data.DFDateTimeZoneArray.push(new Date('1857-06-13'));
bomOutsideCalledClass_2.outsideAttributeDateTimeZoneArray.pushAll(data.DFDateTimeZoneArray);
bomOutsideCalledClass_2.outsideAttributeDateTimeZoneArray.push(new Date('1680-05-29'));

data.DFTextArray.length = 0;
var objectTextArrayLength2 = data.DFTextArray.length;
data.DFTextArray.push('single value in text array - should still be considered as array');
var objectTextArrayLength3 = data.DFTextArray.length;
bomOutsideCalledClass_2.outsideAttributeTextArray.pushAll(data.DFTextArray);
bomOutsideCalledClass_2.outsideAttributeObject = bomOutsideCalledClassObject_2;

data.BOMOutsideClasses.push(bomOutsideCalledClass_2, bomOutsideCalledClass_1);
bomCallingClass.attributeOutsideCallingArray.pushAll(data.BOMOutsideClasses);
data.BOMCallingClass = bomCallingClass;


//			Object objectBooleanArrayLength = scope.getValue("objectBooleanArrayLength");
//			Assert.assertEquals(objectBooleanArrayLength.toString(), "3", "incorrect number of elements");

//			Object objectDateArrayLength = scope.getValue("objectDateArrayLength");
//			Assert.assertEquals(objectDateArrayLength.toString(), "5", "incorrect number of elements");

//			Object objectDateTimeTZArrayLength = scope.getValue("objectDateTimeTZArrayLength");
//			Assert.assertEquals(objectDateTimeTZArrayLength.toString(), "2", "incorrect number of elements");

//			Object objectTextArrayLength = scope.getValue("objectTextArrayLength");
//			Assert.assertEquals(objectTextArrayLength.toString(), "8", "incorrect number of elements");

//			Object objectTextArrayLength2 = scope.getValue("objectTextArrayLength2");
//			Assert.assertEquals(objectTextArrayLength2.toString(), "0", "incorrect number of elements");

//			Object objectTextArrayLength3 = scope.getValue("objectTextArrayLength3");
//			Assert.assertEquals(objectTextArrayLength3.toString(), "1", "incorrect number of elements");

//			Object objectUriLength = scope.getValue("objectUriLength");
//			Assert.assertEquals(objectUriLength.toString(), "3", "incorrect number of elements");

//			Object objectTimeArrayLength = scope.getValue("objectTimeArrayLength");
//			Assert.assertEquals(objectTimeArrayLength.toString(), "6", "incorrect number of elements");

//			Object bomLocallyCalledClassEvaluate = scope.getValue("bomLocallyCalledClass_Evaluate_1");
//			System.out.println("bomLocallyCalledClass_Evaluate is: " + bomLocallyCalledClassEvaluate);
//			Assert.assertEquals(bomLocallyCalledClassEvaluate,
//					"{\"attributeTextLocallyCalled\": \"First\", \"attributeNumberLocallyCalled\": 4, \"attributeDateLocallyCalledArray\": [\"1990-04-26\", \"2019-07-07\", \"2019-10-15\", \"1948-01-30\"], \"attributeLocallyCalledEnumeration\": \"CANCELLED\"}",
//					"incorrect payload for the object");

//			bomLocallyCalledClassEvaluate = scope.getValue("bomLocallyCalledClass_Evaluate_2");
//			System.out.println("bomLocallyCalledClass_Evaluate is: " + bomLocallyCalledClassEvaluate);
//			Assert.assertEquals(bomLocallyCalledClassEvaluate,
//					"{\"attributeTextLocallyCalled\": \"secon\", \"attributeNumberLocallyCalled\": 2468, \"attributeLocallyCalledEnumeration\": \"COMPLETED1234435645689\"}",
//					"incorrect payload for the object");

//			Object objectLocallyCalledObjectArrayLength = scope.getValue("objectLocallyCalledObjectArrayLength");
//			Assert.assertEquals(objectLocallyCalledObjectArrayLength.toString(), "4", "incorrect number of elements");

//			Map<String, Object> result = scope.getData();

//			String bomCallingClass = (String) result.get("BOMCallingClass");
//			System.out.println("BOMCallingClass is " + bomCallingClass);
//			Assert.assertEquals(bomCallingClass,
//					"{\"attributeTextArray\":[\"first value in bom text array\",\"second value in bom text array\",\"THIRD VALUE IN BOM TEXT ARRAY\",\"4TH value in bom text array\",\"5th value in bom text array\",\"6TH v\",\"7TH value in bom text array\",\"8TH value in bom text array\"],\"attributeTimeArray\":[\"10:11:12\",\"13:14:15\",\"16:17:18\",\"19:20:21\",\"01:02:03\"],\"attributeDateArray\":[\"1992-11-19\",\"2002-10-18\",\"1968-02-11\",\"2023-09-08\",\"2029-01-03\"],\"attributeDateTimeTZArray\":[\"1993-11-28T14:40:13.979Z\",\"1992-06-01T17:54:16.343Z\",\"2021-12-26T03:12:13.123Z\"],\"attributeUriArray\":[\"http://www.citibank.com/guid=abcd/customer-success-story\",\"http://www.vista-equity.com\",\"http://www.tibco.com\",\"http://www.spotfire.org/\"],\"attributeBooleanArray\":[false,false,true,true],\"attributeFixedPointNumberArray\":[1001.234,2002.345,3003.456,4004.567,5005.801],\"attributeOutsideEnumeration\":\"OUTSIDEENUMERATION1\",\"attributeLocalCallingArray\":[{\"attributeTextLocallyCalled\":\"THIRD\",\"attributeDateLocallyCalledArray\":[\"2990-04-26\",\"1019-07-07\",\"1947-08-15\",\"1984-04-26\"]},{\"attributeTextLocallyCalled\":\"secon\",\"attributeNumberLocallyCalled\":2468,\"attributeLocallyCalledEnumeration\":\"COMPLETED1234435645689\"},{\"attributeTextLocallyCalled\":\"First\",\"attributeNumberLocallyCalled\":4,\"attributeDateLocallyCalledArray\":[\"1990-04-26\",\"2019-07-07\",\"2019-10-15\",\"1948-01-30\"],\"attributeLocallyCalledEnumeration\":\"CANCELLED\"},{\"attributeTextLocallyCalled\":\"First\",\"attributeNumberLocallyCalled\":4,\"attributeDateLocallyCalledArray\":[\"1990-04-26\",\"2019-07-07\",\"2019-10-15\",\"1948-01-30\"],\"attributeLocallyCalledEnumeration\":\"CANCELLED\"}],\"attributeOutsideCallingArray\":[{\"outsideAttributeDateTimeZoneArray\":[\"1994-11-18T22:00:00.000Z\",\"2004-10-17T23:00:00.000Z\",\"1857-06-12T22:00:00.000Z\",\"1680-05-28T23:00:00.000Z\"],\"outsideAttributeTextArray\":[\"single value in text array - should still be considered as array\"],\"outsideAttributeObject\":{\"outsideClassObjectAttributeURI\":\"http://www.twitter.com/celebrityProfile1/politicianProfile1\",\"outsideClassObjectAttributeBoolean\":false}},{\"outsideAttributeDateTimeZoneArray\":[\"1993-11-18T22:00:00.000Z\",\"2003-10-17T23:00:00.000Z\",\"1680-05-28T23:00:00.000Z\"],\"outsideAttributeTextArray\":[\"1st text value inserted using pushAll(array)\",\"2nd text value inserted using pushAll(array)\",\"3rd text value inserted using push(object)\"],\"outsideAttributeObject\":{\"outsideClassObjectAttributeURI\":\"http://www.twitter.com/celebrityProfile1\",\"outsideClassObjectAttributeBoolean\":true}}]}",
//					"incorrect payload for the object");


]]></tibex:script>
            </tibex:extActivity>
        </bpws:extensionActivity>
        <bpws:extensionActivity>
            <tibex:extActivity name="ScriptTaskSimpleDataManipulation"
                tibex:migrationAllowed="yes" tibex:type="scriptTask"
                tibex:xpdlId="_Wpx4pp1xEem5lq9Ch4kVBA" xmlns:tibex="http://www.tibco.com/bpel/2007/extensions">
                <bpws:targets>
                    <bpws:target linkName="_Wpx4pZ1xEem5lq9Ch4kVBA to _Wpx4pp1xEem5lq9Ch4kVBA"/>
                </bpws:targets>
                <bpws:sources>
                    <bpws:source linkName="_Wpx4pp1xEem5lq9Ch4kVBA to EndEvent"/>
                </bpws:sources>
                <tibex:script expressionLanguage="urn:tibco:wsbpel:2.0:sublang:javascript"><![CDATA[data.DFBooleanArray.push(true);
data.DFBooleanArray.push(false); 
var booleanArrayLength = data.DFBooleanArray.length;
data.DFBooleanArray.push(false);
for(var i=0; i< data.DFBooleanArray.length; i++)
{
Log.write('value of boolean array elements: ' + data.DFBooleanArray[i]);
} //expected value - true, false, false
data.DFDateArray.push(new Date('1990-04-26'));
data.DFDateArray.push(new Date());
data.DFDateArray[1].setDate(10);
data.DFDateArray[1].setMonth(10);
data.DFDateArray[1].setFullYear(1991);
var dateArrayLength = data.DFDateArray.length;
data.DFDateArray.push(new Date('1990-04-26')); 
for(var i=0; i< data.DFDateArray.length; i++)
{
Log.write('value of date array elements: ' + data.DFDateArray[i]);
}//expected value - 1990-04-26, 1991-11-10, 1990-04-26
data.DFTimeArray.push(new Date('10:11:12'));
data.DFTimeArray.push(new Date('13:14:15'));
data.DFTimeArray.push(new Date('16:17:18')); 
data.DFTimeArray.push(new Date('19:20:21'));
data.DFTimeArray.push(new Date('22:23:24')); 
data.DFTimeArray.push(new Date('01:02:03'));
data.DFTimeArray.push(new Date('04:05:06')); 
data.DFTimeArray.push(new Date('13:14:15'));
var timeArrayLength = data.DFTimeArray.length; 
data.DFTimeArray.push(new Date('13:14:15'));
for(var i=0; i< data.DFTimeArray.length; i++) 
{
Log.write('value of time array elements: ' + data.DFTimeArray[i].toString());
}//expected value - 10:11:12, 13:14:15, 16:17:18, 19:20:21, 22:23:24, 01:02:03, 04:05:06, 13:14:15, 13:14:15
data.DFDateTimeZoneArray.push(new Date('1992-06-01T18:24:16.343+00:30'));
data.DFDateTimeZoneArray.push(new Date('1993-07-02T19:25:26.344+01:00'));
data.DFDateTimeZoneArray.push(new Date('1994-08-03T20:26:36.444+01:30'));
data.DFDateTimeZoneArray.push(new Date('1995-09-04T21:27:46.555+02:00'));
data.DFDateTimeZoneArray.push(new Date('1995-09-04T21:27:46.555-11:00'));
data.DFDateTimeZoneArray.push(new Date('1995-09-04T21:27:46.555-11:00'));
var dateTimeZoneArrayLength = data.DFDateTimeZoneArray.length;
data.DFDateTimeZoneArray.pop();
for(var i=0; i< data.DFDateTimeZoneArray.length; i++)
{
Log.write('value of date time array elements: ' + data.DFDateTimeZoneArray[i]);
}//expected value - 1992-06-01T18:24:16.343+00:30, 1993-07-02T19:25:26.344+01:00, 1994-08-03T20:26:36.444+01:30, 1995-09-04T21:27:46.555+02:00, 1995-09-04T21:27:46.555-11:00
data.DFFixedPointNumberArray.push((4.5*60)+1.29811); //‭271.29811‬
data.DFFixedPointNumberArray.push(Math.PI); //3.14159
data.DFFixedPointNumberArray.push(Math.LN10); //2.302
data.DFFixedPointNumberArray.push(Math.LN2); //0.693
data.DFFixedPointNumberArray.push(Math.floor(-231.4213)); //-232
data.DFFixedPointNumberArray.push(Math.sqrt(6.25)); //-2.5
data.DFFixedPointNumberArray.push(Math.max(-111.111, -222.2222, -333.33333)); //-111.111
data.DFFixedPointNumberArray.push(Math.min(-111.111, -222.2222, -333.33333)); //-333.33333
data.DFFixedPointNumberArray.push(Math.ceil(-231.4213)); //-231
var fixedPointArrayLength = data.DFFixedPointNumberArray.length;
for(var i=0; i< data.DFFixedPointNumberArray.length; i++)
{
Log.write('value of fixed point array elements: ' + data.DFFixedPointNumberArray[i]);
}
data.DFFixedPointNumberArray.pop();
var a = 101;
var b = 1.012;
data.DFNumberArray.push((2.5*60)+13+(21/7)); //21
data.DFNumberArray.push(Math.PI * 100); //314.159
data.DFNumberArray.push(Math.LN10 / 100); //0.02302
data.DFNumberArray.push(Math.LN2 * (a)); //‭69.993‬
data.DFNumberArray.push(Math.floor(-231.4213) + (a)); //-131
data.DFNumberArray.push(Math.sqrt(6.25) + (a*b)); //104.712
data.DFNumberArray.push(Math.max(-111.111, -222.2222, -333.33333) * 100); //-11111.1
data.DFNumberArray.push(Math.min(-111.111, -222.2222, -333.333) / 100); //-3.3333333
var numberArrayLength = data.DFNumberArray.length;
data.DFNumberArray.push(a+b);//‭102.012‬
for(var i=0; i< data.DFNumberArray.length; i++)
{
Log.write('value of number array elements: ' + data.DFNumberArray[i]);
}
var aString = "third";
var bString = ' VALUE';
data.DFTextArray.push("FIRST VALUE"); //FIRST VALUE
data.DFTextArray.push('second value'); //second value
data.DFTextArray.push(aString + bString); //third VALUE
data.DFTextArray.push(data.DFTextArray[0].concat(bString)); //FIRST VALUE  VALUE
data.DFTextArray.push(data.DFDateArray[0].toString()); //1990-04-26
var textArrayLength = data.DFTextArray.length;
for(var i=0; i< data.DFTextArray.length; i++)
{
Log.write('value of text array elements: ' + data.DFTextArray[i]);
}

//			Object booleanArrayLength = scope.getValue("booleanArrayLength");
//			Assert.assertEquals(booleanArrayLength.toString(), "2", "incorrect number of elements");

//			Object dateArrayLength = scope.getValue("dateArrayLength");
//			Assert.assertEquals(dateArrayLength.toString(), "2", "incorrect number of elements");

//			Object timeArrayLength = scope.getValue("timeArrayLength");
//			Assert.assertEquals(timeArrayLength.toString(), "8", "incorrect number of elements");

//			Object dateTimeZoneArrayLength = scope.getValue("dateTimeZoneArrayLength");
//			Assert.assertEquals(dateTimeZoneArrayLength.toString(), "6", "incorrect number of elements");

//			Object fixedPointArrayLength = scope.getValue("fixedPointArrayLength");
//			Assert.assertEquals(fixedPointArrayLength.toString(), "9", "incorrect number of elements");

//			Object numberArrayLength = scope.getValue("numberArrayLength");
//			Assert.assertEquals(numberArrayLength.toString(), "8", "incorrect number of elements");

//			Object textArrayLength = scope.getValue("textArrayLength");
//			Assert.assertEquals(textArrayLength.toString(), "5", "incorrect number of elements");

//			Object dFTextArray = result.get("DFTextArray");
//			System.out.println("DFTextArray is " + dFTextArray);
//			Assert.assertEquals(dFTextArray.toString(),
//					"[FIRST VALUE, second value, third VALUE, FIRST VALUE VALUE, Thu Apr 26 1990 00:00:00 GMT+0100 (BST)]",
//					"incorrect values for text array");

//			Object dFNumberArray = result.get("DFNumberArray");
//			System.out.println("DFNumberArray is " + dFNumberArray);
//			Assert.assertEquals(dFNumberArray.toString(), "[166, 314, 0, 70, -131, 105, -11111, -3, 102]",
//					"incorrect values for number array");

//			Object dFFixedPointNumberArray = result.get("DFFixedPointNumberArray");
//			System.out.println("DFFixedPointNumberArray is " + dFFixedPointNumberArray);
//			Assert.assertEquals(dFFixedPointNumberArray.toString(),
//					"[271.29811, 3.14159, 2.30259, 0.69315, -232, 2.5, -111.111, -333.33333]",
//					"incorrect values for fixed point number array");

//			Object dFBooleanArray = result.get("DFBooleanArray");
//			System.out.println("DFBooleanArray is " + dFBooleanArray);
//			Assert.assertEquals(dFBooleanArray.toString(), "[true, false, false]", "incorrect values for text array");

//			Object dFDateTimeZoneArray = result.get("DFDateTimeZoneArray");
//			System.out.println("DFDateTimeZoneArray is " + dFDateTimeZoneArray);
//			Assert.assertEquals(dFDateTimeZoneArray.toString(),
//					"[1992-06-01T17:54:16.343Z, 1993-07-02T18:25:26.344Z, 1994-08-03T18:56:36.444Z, 1995-09-04T19:27:46.555Z, 1995-09-05T08:27:46.555Z]",
//					"incorrect values for date time zone array");

//			Object dFTimeArray = result.get("DFTimeArray");
//			System.out.println("DFTimeArray is " + dFTimeArray);
//			Assert.assertEquals(dFTimeArray.toString(),
//					"[10:11:12, 13:14:15, 16:17:18, 19:20:21, 22:23:24, 01:02:03, 04:05:06, 13:14:15, 13:14:15]",
//					"incorrect values for text array");

//			Object dFDateArray = result.get("DFDateArray");
//			System.out.println("DFDateArray is " + dFDateArray);
//			Assert.assertEquals(dFDateArray.toString(), "[1990-04-26, 1991-11-10, 1990-04-26]",
//					"incorrect values for text array");]]></tibex:script>
            </tibex:extActivity>
        </bpws:extensionActivity>
    </bpws:flow>
</bpws:process>
